package ast

import (
	"aHobeychi/GoCompiler/lexer"
)

type Production uint8
type Set map[Production]map[lexer.TokenType]bool

const (
	PROGRAM = iota
	MAIN
	EXPR
	EXPRTAIL
	ARITHEXPR
	ARITHTAIL
	FACTOR
	TERM
	TERMTAIL
	INDICEREP_PROD

	VISIBILITY
	PUBLIC
	PRIVATE
	DEFAULT

	// Functions
	FUNCTION
	FUNCTIONHEAD
	FUNCTIONBODY
	FUNCORVAR
	FUNCORASSIGNSTAT
	FUNCORVARIDNEST
	FUNCORASSIGNSTATIDNEST
	FUNCORVARIDNESTTAIL
	FUNCSTATTAIL
	RETURNTYPE
	NESTEDID
	APARAMS
	APARAMSTAIL
	FUNCDEF
	FPARAMS
	FPARAMSTAIL

	// CLASS
	CLASSDECL
	CLASSDECLBODY
	CLASS
	CLASSMEMBERDECL
	CLASSMEMBER
	CLASSMETHOD

	// VARIABLE
	VARIABLE
	VARIABLEIDNEST
	VARIABLEIDNESTTAIL
	METHODBODYVAR
	FUNCDECL
	FUNCDECLTAIL
	MEMBERDECL
	VARIABLEDECL
	VARIABLEDECLREP
	TYPE
	IDENTIFIER
	ARRAYSIZE
	INDICEREP
	INHERITS

	// STATEMENTS
	STATEMENT
	STATEMENTLIST
	STATEMENTBLOCK
	IF
	ELSE
	CONTINUE
	WHILE
	BREAK
	READ
	WRITE
	RETURN
	TERNARY

	// TYPES
	INT_VALUE
	INVALID
	FLOAT_VALUE
	STRINGLIT
	VOID

	// OPERATIONS
	MULTOP
	RELOP
	ASSIGN
	SIGN
	PLUS
	MINUS
	NEGATIVE
	POSITIVE
	MUL
	DIV
	EQ
	NOTEQ
	NOT
	LT
	LTE
	GT
	GTE
	OR
	AND
	EOF
)

// Converts uint8 code to String, helps with error messages.
var TypesStrings = map[Production]string{

	PROGRAM:    "PROG",
	VISIBILITY: "VISIBILITY",
	PUBLIC:     "PUBLIC",
	PRIVATE:    "PRIVATE",
	DEFAULT:    "DEFAULT",

	// FUNCTION
	FUNCDEF:      "FUNCDEF",
	FUNCTION:     "FUNC",
	FUNCTIONHEAD: "FUNCTIONHEAD",
	FUNCTIONBODY: "FUNCTIONBODY",
	FPARAMS:      "FPARAMS",
	RETURNTYPE:   "RETURN_TYPE",
	NESTEDID:     "NESTEDID",
	MAIN:         "MAIN",

	// CLASS
	CLASSDECL:       "CLASSDECL",
	CLASS:           "CLASS",
	CLASSMEMBERDECL: "CLASSMEMBERDECL",
	CLASSMEMBER:     "CLASSMEMBER",
	CLASSMETHOD:     "CLASSMETHOD",

	// VARIABLES
	VARIABLE:       "VARIABLE",
	VARIABLEIDNEST: "VARIABLEIDNEST",
	VARIABLEDECL:   "VARIABLEDECL",
	TYPE:           "TYPE",
	IDENTIFIER:     "IDENTIFIER",
	ARRAYSIZE:      "ARRAYSIZE",
	INDICEREP:      "INDEX",
	APARAMS:        "APARAMS",
	INHERITS:       "INHERITS",

	// STATEMENTS
	STATEMENT: "STATEMENT",
	IF:        "IF",
	ELSE:      "ELSE",
	CONTINUE:  "CONTINUE",
	WHILE:     "WHILE",
	BREAK:     "BREAK",
	READ:      "READ",
	WRITE:     "WRITE",
	RETURN:    "RETURN",
	TERNARY:   "TERNARY",
	POSITIVE:  "POSITIVE",
	NEGATIVE:  "NEGATIVE",

	// TYPES
	INT_VALUE:   "INT_VALUE",
	INVALID:     "INVALID",
	FLOAT_VALUE: "FLOAT_VALUE",
	STRINGLIT:   "STRINGLIT",

	// OPERATIONS
	ASSIGN: "ASSIGN",
	MULTOP: "MULTOP",
	RELOP:  "RELOP",
	SIGN:   "SIGN",
	PLUS:   "PLUS",
	MINUS:  "MINUS",
	MUL:    "MUL",
	DIV:    "DIV",
	EQ:     "EQ",
	NOTEQ:  "NOTEQ",
	NOT:    "NOT",
	LT:     "LT",
	LTE:    "LTE",
	GT:     "GT",
	GTE:    "GTE",
	OR:     "OR",
	AND:    "AND",
	EOF:    "EOF",
}
